# --- ここから追加 --------------------------------------------
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional, Dict
import os, json, secrets

TOKENS_PATH = "/data/mrc_tokens.json"   # Render Disk を使うなら /data 配下でOK
MEM_DB: Dict[str, Dict] = {}            # メモリキャッシュ

def _load_tokens():
    try:
        if os.path.exists(TOKENS_PATH):
            with open(TOKENS_PATH, "r", encoding="utf-8") as f:
                d = json.load(f)
                if isinstance(d, dict):
                    MEM_DB.update(d)
    except Exception:
        pass

def _save_tokens():
    try:
        os.makedirs(os.path.dirname(TOKENS_PATH), exist_ok=True)
        with open(TOKENS_PATH, "w", encoding="utf-8") as f:
            json.dump(MEM_DB, f, ensure_ascii=False)
    except Exception:
        pass

try:
    app  # 既存の app を流用
except NameError:
    app = FastAPI()

@app.on_event("startup")
def _startup():
    _load_tokens()

class RegisterIn(BaseModel):
    user_id: str                        # JS 側の uuid
    ua: Optional[str] = None
    platform: Optional[str] = None

class RegisterOut(BaseModel):
    ok: bool
    token: str

@app.post("/register", response_model=RegisterOut)
def register(body: RegisterIn):
    uid = (body.user_id or "").strip()
    if not uid:
        raise HTTPException(status_code=400, detail="user_id required")

    # 既存があれば再発行しない（繰り返し実行に強い）
    if uid in MEM_DB and "token" in MEM_DB[uid]:
        token = MEM_DB[uid]["token"]
    else:
        token = secrets.token_hex(16)
        MEM_DB[uid] = {"token": token, "ua": body.ua, "platform": body.platform}
        _save_tokens()

    return {"ok": True, "token": token}
# --- ここまで追加 --------------------------------------------
